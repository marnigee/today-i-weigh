{"ast":null,"code":"// export default (req, res) => {\n//   res.status(200).json({\n//     quote: 'Write tests, not too many, mostly integration',\n//     author: 'Guillermo Rauch'\n//   });\n// };\nimport _ from 'lodash';\nconst keys = [new Date('10/1/2019'), new Date('10/2/2019'), new Date('10/3/2019'), new Date('10/4/2019'), new Date('10/5/2019'), new Date('10/6/2019'), new Date('10/7/2019'), new Date('10/8/2019'), new Date('10/9/2019'), new Date('10/10/2019'), new Date('10/11/2019'), new Date('10/12/2019'), new Date('10/13/2019'), new Date('10/14/2019'), new Date('10/15/2019'), new Date('10/16/2019'), new Date('10/17/2019'), new Date('10/18/2019'), new Date('10/19/2019'), new Date('10/20/2019'), new Date('10/21/2019'), new Date('10/21/2019'), new Date('10/22/2019'), new Date('10/23/2019'), new Date('10/24/2019'), new Date('10/25/2019'), new Date('10/26/2019'), new Date('10/27/2019'), new Date('10/28/2019'), new Date('10/29/2019'), new Date('10/30/2019'), new Date('10/31/2019'), new Date('11/1/2019'), new Date('11/2/2019'), new Date('11/3/2019'), new Date('11/4/2019'), new Date('11/5/2019'), new Date('11/6/2019'), new Date('11/7/2019'), new Date('11/8/2019'), new Date('11/9/2019'), new Date('11/10/2019'), new Date('11/11/2019'), new Date('11/12/2019'), new Date('11/13/2019'), new Date('11/14/2019'), new Date('11/15/2019'), new Date('11/16/2019'), new Date('11/17/2019'), new Date('11/18/2019'), new Date('11/19/2019'), new Date('11/20/2019'), new Date('11/21/2019'), new Date('11/22/2019'), new Date('11/23/2019'), new Date('11/24/2019'), new Date('11/25/2019'), new Date('11/26/2019'), new Date('11/27/2019'), new Date('11/28/2019'), new Date('11/29/2019'), new Date('11/30/2019'), new Date('12/1/2019'), new Date('12/2/2019'), new Date('12/3/2019'), new Date('12/4/2019'), new Date('12/5/2019'), new Date('12/6/2019'), new Date('12/7/2019'), new Date('12/8/2019'), new Date('12/9/2019'), new Date('12/10/2019'), new Date('12/11/2019'), new Date('12/12/2019'), new Date('12/13/2019'), new Date('12/14/2019'), new Date('12/15/2019'), new Date('12/16/2019'), new Date('12/17/2019'), new Date('12/18/2019'), new Date('12/19/2019'), new Date('12/20/2019'), new Date('12/21/2019'), new Date('12/22/2019'), new Date('12/23/2019'), new Date('12/24/2019'), new Date('12/25/2019'), new Date('12/26/2019'), new Date('12/27/2019'), new Date('12/28/2019'), new Date('12/29/2019'), new Date('12/30/2019'), new Date('12/31/2019'), new Date('1/1/2020'), new Date('1/2/2020'), new Date('1/3/2020'), new Date('1/4/2020'), new Date('1/5/2020'), new Date('1/6/2020'), new Date('1/7/2020'), new Date('1/8/2020'), new Date('1/9/2020'), new Date('1/10/2020'), new Date('1/11/2020'), new Date('1/12/2020'), new Date('1/13/2020'), new Date('1/14/2020'), new Date('1/15/2020'), new Date('1/16/2020'), new Date('1/17/2020'), new Date('1/18/2020'), new Date('1/19/2020'), new Date('1/20/2020'), new Date('1/21/2020'), new Date('1/22/2020'), new Date('1/23/2020'), new Date('1/24/2020'), new Date('1/25/2020'), new Date('1/26/2020'), new Date('1/27/2020'), new Date('1/28/2020'), new Date('1/29/2020'), new Date('1/30/2020'), new Date('1/31/2020'), new Date('2/1/2020'), new Date('2/2/2020'), new Date('2/3/2020'), new Date('2/4/2020'), new Date('2/5/2020'), new Date('2/6/2020'), new Date('2/7/2020'), new Date('2/8/2020'), new Date('2/9/2020'), new Date('2/10/2020'), new Date('2/11/2020'), new Date('2/12/2020'), new Date('2/13/2020'), new Date('2/14/2020'), new Date('2/15/2020'), new Date('2/16/2020'), new Date('2/17/2020'), new Date('2/18/2020'), new Date('2/19/2020'), new Date('2/20/2020'), new Date('2/21/2020'), new Date('2/22/2020'), new Date('2/23/2020'), new Date('2/24/2020'), new Date('2/25/2020'), new Date('2/26/2020'), new Date('2/27/2020'), new Date('2/28/2020')];\nconst values = [0, 134.00, 0, 0, 135.60, 134.00, 134.00, 0, 134.00, 134.00, 134.80, 134.20, 134.20, 133.00, 134.00, 134.00, 133.60, 134.80, 133.60, 132.80, 135.40, 0, 0, 134.00, 134.00, 134.00, 134.00, 134.00, 0, 0, 133.20, 133.20, 134.20, 0, 131.80, 133.40, 133.80, 133.80, 0, 132.20, 132.20, 133.20, 133.20, 132.80, 132.80, 132.40, 132.80, 132.60, 0, 132.20, 133.00, 132.60, 132.60, 133.20, 133.60, 134.80, 133.40, 0, 133.4, 133.2, 133, 133.6, 133.6, 134.6, 135, 135, 0, 134.8, 134, 134.4, 0, 0, 134, 134, 133.4, 134.8, 133.4, 134.2, 0, 134.2, 133, 0, 133.4, 0, 0, 0, 0, 0, 0, 133.6, 133.6, 133, 133, 133, 133, 132, 132.6, 132.6, 132.6, 0, 134, 132.4, 132.4, 132.4, 133, 133, 0, 133.6, 133.6, 133.6, 133.6, 133.6, 0, 0, 0, 0, 0, 0, 0, 0, 133.6, 132.4, 131.8, 0, 0, 132.4, 132.4, 131.6, 131.6, 0, 0, 0, 131.8, 132.4, 132.4, 131.4, 131.4, 0, 0, 133.4, 133.4, 132.4, 132.2, 132.2, 131.6, 0, 133.2, 134, 0, 131.2, 131.2, 130.2];\n\nconst weights = _.zipObject(keys, values);\n\nlet firstWeekAverage;\nlet currentUpOrDown;\nlet currentWeekAverage; // console.log('*** weights: ', weights);\n\nconst formatNumber = number => parseFloat(String(number)).toFixed(2);\n\nconst highest = Math.max(...values);\nconst lowest = Math.min(...values.filter(number => number !== 0));\n\nfunction getAvg(weights) {\n  const total = weights.reduce((acc, c) => acc + c, 0);\n  return total / weights.length;\n}\n\nexport default ((req, res) => {\n  const numbers = Object.values(weights);\n  var perChunk = 7; // items per chunk\n\n  var arrayChunks = numbers.reduce((resultArray, item, index) => {\n    const chunkIndex = Math.floor(index / perChunk);\n\n    if (!resultArray[chunkIndex]) {\n      resultArray[chunkIndex] = []; // start a new chunk\n    }\n\n    resultArray[chunkIndex].push(item);\n    return resultArray;\n  }, []);\n  const averages = arrayChunks.reduce((acc, current, index, arrayChunks) => {\n    const filteredCurrent = current.filter(number => number !== 0);\n    const previous = arrayChunks[index - 1] ? index - 1 : 0;\n    const filteredPrevious = arrayChunks[previous].filter(number => number !== 0);\n\n    if (_.isEmpty(filteredCurrent) || _.isEmpty(filteredPrevious)) {\n      return acc;\n    } // console.log('*** previous: ', previous, index);\n    // console.log('*** arrayChunks[previous]: ', arrayChunks[previous], index);\n\n\n    const currentAverage = getAvg(filteredCurrent);\n\n    if (index === 0) {\n      firstWeekAverage = currentAverage;\n    }\n\n    if (arrayChunks.length > index) {\n      currentWeekAverage = currentAverage;\n      currentUpOrDown = currentAverage - getAvg(filteredPrevious);\n    }\n\n    const averageHash = {\n      average: formatNumber(currentAverage),\n      upOrDown: formatNumber(currentAverage - getAvg(filteredPrevious))\n    }; // if (index === 16) {\n    //   console.log('*** averageHash: ', averageHash, index);\n    //   console.log('*** current: ', current);\n    // }\n\n    acc.push(averageHash);\n    return acc;\n  }, []);\n  const allAverages = averages.map(avgObject => parseFloat(avgObject.upOrDown));\n  const averagePerWeek = getAvg(allAverages.filter(avg => avg !== 0));\n  const bestWeeklyAverage = Math.min(...allAverages);\n  const worstWeeklyAverage = Math.max(...allAverages);\n  const totalWeeks = arrayChunks.length;\n  const latest = values.reverse().find(number => number !== 0); // const parsedAllAverages = allAverages.map(avg => parseFloat(avg));\n\n  const originalReturnValue = [arrayChunks, averages, {\n    latestWeight: formatNumber(latest),\n    currentUpOrDown: formatNumber(currentUpOrDown),\n    overall: formatNumber(currentWeekAverage - firstWeekAverage),\n    averagePerWeek: formatNumber(averagePerWeek),\n    highestWeight: highest,\n    lowestWeight: lowest,\n    // firstWeekAverage: formatNumber(firstWeekAverage),\n    // currentWeekAverage: formatNumber(currentWeekAverage),\n    totalWeeks: totalWeeks,\n    bestWeeklyAverage: formatNumber(bestWeeklyAverage),\n    worstWeeklyAverage: formatNumber(worstWeeklyAverage)\n  }];\n  res.status(200).json({\n    latestWeight: formatNumber(latest),\n    currentUpOrDown: formatNumber(currentUpOrDown),\n    overall: formatNumber(currentWeekAverage - firstWeekAverage),\n    averagePerWeek: formatNumber(averagePerWeek),\n    highestWeight: highest,\n    lowestWeight: lowest,\n    // firstWeekAverage: formatNumber(firstWeekAverage),\n    // currentWeekAverage: formatNumber(currentWeekAverage),\n    totalWeeks: totalWeeks,\n    bestWeeklyAverage: formatNumber(bestWeeklyAverage),\n    worstWeeklyAverage: formatNumber(worstWeeklyAverage)\n  });\n});","map":{"version":3,"sources":["/Users/marnigoltsman/Documents/code/today-i-weigh/pages/api/randomQuote.js"],"names":["_","keys","Date","values","weights","zipObject","firstWeekAverage","currentUpOrDown","currentWeekAverage","formatNumber","number","parseFloat","String","toFixed","highest","Math","max","lowest","min","filter","getAvg","total","reduce","acc","c","length","req","res","numbers","Object","perChunk","arrayChunks","resultArray","item","index","chunkIndex","floor","push","averages","current","filteredCurrent","previous","filteredPrevious","isEmpty","currentAverage","averageHash","average","upOrDown","allAverages","map","avgObject","averagePerWeek","avg","bestWeeklyAverage","worstWeeklyAverage","totalWeeks","latest","reverse","find","originalReturnValue","latestWeight","overall","highestWeight","lowestWeight","status","json"],"mappings":"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","sourcesContent":["// export default (req, res) => {\n//   res.status(200).json({\n//     quote: 'Write tests, not too many, mostly integration',\n//     author: 'Guillermo Rauch'\n//   });\n// };\nimport _ from 'lodash';\n\nconst keys = [\n  new Date('10/1/2019'),\n  new Date('10/2/2019'),\n  new Date('10/3/2019'),\n  new Date('10/4/2019'),\n  new Date('10/5/2019'),\n  new Date('10/6/2019'),\n  new Date('10/7/2019'),\n  new Date('10/8/2019'),\n  new Date('10/9/2019'),\n  new Date('10/10/2019'),\n  new Date('10/11/2019'),\n  new Date('10/12/2019'),\n  new Date('10/13/2019'),\n  new Date('10/14/2019'),\n  new Date('10/15/2019'),\n  new Date('10/16/2019'),\n  new Date('10/17/2019'),\n  new Date('10/18/2019'),\n  new Date('10/19/2019'),\n  new Date('10/20/2019'),\n  new Date('10/21/2019'),\n  new Date('10/21/2019'),\n  new Date('10/22/2019'),\n  new Date('10/23/2019'),\n  new Date('10/24/2019'),\n  new Date('10/25/2019'),\n  new Date('10/26/2019'),\n  new Date('10/27/2019'),\n  new Date('10/28/2019'),\n  new Date('10/29/2019'),\n  new Date('10/30/2019'),\n  new Date('10/31/2019'),\n  new Date('11/1/2019'),\n  new Date('11/2/2019'),\n  new Date('11/3/2019'),\n  new Date('11/4/2019'),\n  new Date('11/5/2019'),\n  new Date('11/6/2019'),\n  new Date('11/7/2019'),\n  new Date('11/8/2019'),\n  new Date('11/9/2019'),\n  new Date('11/10/2019'),\n  new Date('11/11/2019'),\n  new Date('11/12/2019'),\n  new Date('11/13/2019'),\n  new Date('11/14/2019'),\n  new Date('11/15/2019'),\n  new Date('11/16/2019'),\n  new Date('11/17/2019'),\n  new Date('11/18/2019'),\n  new Date('11/19/2019'),\n  new Date('11/20/2019'),\n  new Date('11/21/2019'),\n  new Date('11/22/2019'),\n  new Date('11/23/2019'),\n  new Date('11/24/2019'),\n  new Date('11/25/2019'),\n  new Date('11/26/2019'),\n  new Date('11/27/2019'),\n  new Date('11/28/2019'),\n  new Date('11/29/2019'),\n  new Date('11/30/2019'),\n  new Date('12/1/2019'),\n  new Date('12/2/2019'),\n  new Date('12/3/2019'),\n  new Date('12/4/2019'),\n  new Date('12/5/2019'),\n  new Date('12/6/2019'),\n  new Date('12/7/2019'),\n  new Date('12/8/2019'),\n  new Date('12/9/2019'),\n  new Date('12/10/2019'),\n  new Date('12/11/2019'),\n  new Date('12/12/2019'),\n  new Date('12/13/2019'),\n  new Date('12/14/2019'),\n  new Date('12/15/2019'),\n  new Date('12/16/2019'),\n  new Date('12/17/2019'),\n  new Date('12/18/2019'),\n  new Date('12/19/2019'),\n  new Date('12/20/2019'),\n  new Date('12/21/2019'),\n  new Date('12/22/2019'),\n  new Date('12/23/2019'),\n  new Date('12/24/2019'),\n  new Date('12/25/2019'),\n  new Date('12/26/2019'),\n  new Date('12/27/2019'),\n  new Date('12/28/2019'),\n  new Date('12/29/2019'),\n  new Date('12/30/2019'),\n  new Date('12/31/2019'),\n  new Date('1/1/2020'),\n  new Date('1/2/2020'),\n  new Date('1/3/2020'),\n  new Date('1/4/2020'),\n  new Date('1/5/2020'),\n  new Date('1/6/2020'),\n  new Date('1/7/2020'),\n  new Date('1/8/2020'),\n  new Date('1/9/2020'),\n  new Date('1/10/2020'),\n  new Date('1/11/2020'),\n  new Date('1/12/2020'),\n  new Date('1/13/2020'),\n  new Date('1/14/2020'),\n  new Date('1/15/2020'),\n  new Date('1/16/2020'),\n  new Date('1/17/2020'),\n  new Date('1/18/2020'),\n  new Date('1/19/2020'),\n  new Date('1/20/2020'),\n  new Date('1/21/2020'),\n  new Date('1/22/2020'),\n  new Date('1/23/2020'),\n  new Date('1/24/2020'),\n  new Date('1/25/2020'),\n  new Date('1/26/2020'),\n  new Date('1/27/2020'),\n  new Date('1/28/2020'),\n  new Date('1/29/2020'),\n  new Date('1/30/2020'),\n  new Date('1/31/2020'),\n  new Date('2/1/2020'),\n  new Date('2/2/2020'),\n  new Date('2/3/2020'),\n  new Date('2/4/2020'),\n  new Date('2/5/2020'),\n  new Date('2/6/2020'),\n  new Date('2/7/2020'),\n  new Date('2/8/2020'),\n  new Date('2/9/2020'),\n  new Date('2/10/2020'),\n  new Date('2/11/2020'),\n  new Date('2/12/2020'),\n  new Date('2/13/2020'),\n  new Date('2/14/2020'),\n  new Date('2/15/2020'),\n  new Date('2/16/2020'),\n  new Date('2/17/2020'),\n  new Date('2/18/2020'),\n  new Date('2/19/2020'),\n  new Date('2/20/2020'),\n  new Date('2/21/2020'),\n  new Date('2/22/2020'),\n  new Date('2/23/2020'),\n  new Date('2/24/2020'),\n  new Date('2/25/2020'),\n  new Date('2/26/2020'),\n  new Date('2/27/2020'),\n  new Date('2/28/2020')\n];\nconst values = [\n  0,\n  134.00,\n  0,\n  0,\n  135.60,\n  134.00,\n  134.00,\n  0,\n  134.00,\n  134.00,\n  134.80,\n  134.20,\n  134.20,\n  133.00,\n  134.00,\n  134.00,\n  133.60,\n  134.80,\n  133.60,\n  132.80,\n  135.40,\n  0,\n  0,\n  134.00,\n  134.00,\n  134.00,\n  134.00,\n  134.00,\n  0,\n  0,\n  133.20,\n  133.20,\n  134.20,\n  0,\n  131.80,\n  133.40,\n  133.80,\n  133.80,\n  0,\n  132.20,\n  132.20,\n  133.20,\n  133.20,\n  132.80,\n  132.80,\n  132.40,\n  132.80,\n  132.60,\n  0,\n  132.20,\n  133.00,\n  132.60,\n  132.60,\n  133.20,\n  133.60,\n  134.80,\n  133.40,\n  0,\n  133.4,\n  133.2,\n  133,\n  133.6,\n  133.6,\n  134.6,\n  135,\n  135,\n  0,\n  134.8,\n  134,\n  134.4,\n  0,\n  0,\n  134,\n  134,\n  133.4,\n  134.8,\n  133.4,\n  134.2,\n  0,\n  134.2,\n  133,\n  0,\n  133.4,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  133.6,\n  133.6,\n  133,\n  133,\n  133,\n  133,\n  132,\n  132.6,\n  132.6,\n  132.6,\n  0,\n  134,\n  132.4,\n  132.4,\n  132.4,\n  133,\n  133,\n  0,\n  133.6,\n  133.6,\n  133.6,\n  133.6,\n  133.6,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  133.6,\n  132.4,\n  131.8,\n  0,\n  0,\n  132.4,\n  132.4,\n  131.6,\n  131.6,\n  0,\n  0,\n  0,\n  131.8,\n  132.4,\n  132.4,\n  131.4,\n  131.4,\n  0,\n  0,\n  133.4,\n  133.4,\n  132.4,\n  132.2,\n  132.2,\n  131.6,\n  0,\n  133.2,\n  134,\n  0,\n  131.2,\n  131.2,\n  130.2\n];\nconst weights = _.zipObject(keys, values);\nlet firstWeekAverage;\nlet currentUpOrDown;\nlet currentWeekAverage;\n// console.log('*** weights: ', weights);\n\nconst formatNumber = number => parseFloat(String(number)).toFixed(2);\n\nconst highest = Math.max(...values);\nconst lowest = Math.min(...values.filter(number => number !== 0));\n\nfunction getAvg (weights) {\n  const total = weights.reduce((acc, c) => acc + c, 0);\n  return total / weights.length;\n}\n\nexport default (req, res) => {\n  const numbers = Object.values(weights);\n  var perChunk = 7; // items per chunk\n  var arrayChunks = numbers.reduce((resultArray, item, index) => {\n    const chunkIndex = Math.floor(index / perChunk);\n    if (!resultArray[chunkIndex]) {\n      resultArray[chunkIndex] = []; // start a new chunk\n    }\n    resultArray[chunkIndex].push(item);\n    return resultArray;\n  }, []);\n\n  const averages = arrayChunks.reduce((acc, current, index, arrayChunks) => {\n    const filteredCurrent = current.filter(number => number !== 0);\n    const previous = arrayChunks[index - 1] ? index - 1 : 0;\n    const filteredPrevious = arrayChunks[previous].filter(number => number !== 0);\n    if (_.isEmpty(filteredCurrent) || _.isEmpty(filteredPrevious)) {\n      return acc;\n    }\n    // console.log('*** previous: ', previous, index);\n    // console.log('*** arrayChunks[previous]: ', arrayChunks[previous], index);\n    const currentAverage = getAvg(filteredCurrent);\n    if (index === 0) {\n      firstWeekAverage = currentAverage;\n    }\n    if (arrayChunks.length > index) {\n      currentWeekAverage = currentAverage;\n      currentUpOrDown = currentAverage - getAvg(filteredPrevious);\n    }\n    const averageHash = {\n      average: formatNumber(currentAverage),\n      upOrDown: formatNumber(currentAverage - getAvg(filteredPrevious))\n    };\n    // if (index === 16) {\n    //   console.log('*** averageHash: ', averageHash, index);\n    //   console.log('*** current: ', current);\n    // }\n    acc.push(averageHash);\n    return acc;\n  }, []);\n\n  const allAverages = averages.map(avgObject => parseFloat(avgObject.upOrDown));\n  const averagePerWeek = getAvg(allAverages.filter(avg => avg !== 0));\n  const bestWeeklyAverage = Math.min(...allAverages);\n  const worstWeeklyAverage = Math.max(...allAverages);\n  const totalWeeks = arrayChunks.length;\n  const latest = values.reverse().find(number => number !== 0);\n  // const parsedAllAverages = allAverages.map(avg => parseFloat(avg));\n\n  const originalReturnValue = [arrayChunks, averages, {\n    latestWeight: formatNumber(latest),\n    currentUpOrDown: formatNumber(currentUpOrDown),\n    overall: formatNumber(currentWeekAverage - firstWeekAverage),\n    averagePerWeek: formatNumber(averagePerWeek),\n    highestWeight: highest,\n    lowestWeight: lowest,\n    // firstWeekAverage: formatNumber(firstWeekAverage),\n    // currentWeekAverage: formatNumber(currentWeekAverage),\n    totalWeeks: totalWeeks,\n    bestWeeklyAverage: formatNumber(bestWeeklyAverage),\n    worstWeeklyAverage: formatNumber(worstWeeklyAverage)\n  }];\n\n  res.status(200).json({\n    latestWeight: formatNumber(latest),\n    currentUpOrDown: formatNumber(currentUpOrDown),\n    overall: formatNumber(currentWeekAverage - firstWeekAverage),\n    averagePerWeek: formatNumber(averagePerWeek),\n    highestWeight: highest,\n    lowestWeight: lowest,\n    // firstWeekAverage: formatNumber(firstWeekAverage),\n    // currentWeekAverage: formatNumber(currentWeekAverage),\n    totalWeeks: totalWeeks,\n    bestWeeklyAverage: formatNumber(bestWeeklyAverage),\n    worstWeeklyAverage: formatNumber(worstWeeklyAverage)\n  });\n};\n"]},"metadata":{},"sourceType":"module"}