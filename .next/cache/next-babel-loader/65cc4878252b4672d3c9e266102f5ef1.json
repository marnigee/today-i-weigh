{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/marnigoltsman/Documents/code/today-i-weigh/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\n\nvar Index = function Index(props) {\n  return (// <Layout>\n    __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 6\n      },\n      __self: this\n    }, \"Batman TV Shows: \", props.shows) // <ul>\n    //   {props.shows.map(show => (\n    //     <li key={show.id}>\n    //       {show.name}\n    //     </li>\n    //   ))}\n    // </ul>\n\n  );\n};\n\nIndex.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://api.tvmaze.com/search/shows?q=batman'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          console.log(\"Show data fetched. Count: \".concat(data.length));\n          return _context.abrupt(\"return\", {\n            shows: data.map(function (entry) {\n              return entry.show;\n            })\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index; // import useSWR from 'swr';\n// import fetch from 'isomorphic-unfetch';\n//\n// function fetcher (url) {\n//   return fetch(url).then(r => r.json());\n// }\n//\n// export default function Index () {\n//   const { data, error } = useSWR('/api/randomQuote', fetcher);\n//   // The following line has optional chaining, added in Next.js v9.1.5,\n//   // is the same as `data && data.author`\n//   // const author = data.author;\n//   // let quote = data.quote;\n//   debugger;\n//   let quote;\n//\n//   if (!data) quote = 'Loading...';\n//   if (error) quote = 'Failed to fetch the quote.';\n//\n//   return (\n//     <main className='center'>\n//       <div className='quote'>{quote}</div>\n//\n//       <style jsx>{`\n//         main {\n//           width: 90%;\n//           max-width: 900px;\n//           margin: 300px auto;\n//           text-align: center;\n//         }\n//         .quote {\n//           font-family: cursive;\n//           color: #e243de;\n//           font-size: 24px;\n//           padding-bottom: 10px;\n//         }\n//         .author {\n//           font-family: sans-serif;\n//           color: #559834;\n//           font-size: 20px;\n//         }\n//       `}\n//       </style>\n//     </main>\n//   );\n// }","map":{"version":3,"sources":["/Users/marnigoltsman/Documents/code/today-i-weigh/pages/index.js"],"names":["fetch","Index","props","shows","getInitialProps","res","json","data","console","log","length","map","entry","show"],"mappings":";;;;AACA,OAAOA,KAAP,MAAkB,oBAAlB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK;AAAA,SACjB;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAsBA,KAAK,CAACC,KAA5B,CAFiB,CAIjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAViB;AAAA,CAAnB;;AAaAF,KAAK,CAACG,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACJJ,KAAK,CAAC,8CAAD,CADD;;AAAA;AAChBK,UAAAA,GADgB;AAAA;AAAA,2CAEHA,GAAG,CAACC,IAAJ,EAFG;;AAAA;AAEhBC,UAAAA,IAFgB;AAItBC,UAAAA,OAAO,CAACC,GAAR,qCAAyCF,IAAI,CAACG,MAA9C;AAJsB,2CAMf;AACLP,YAAAA,KAAK,EAAEI,IAAI,CAACI,GAAL,CAAS,UAAAC,KAAK;AAAA,qBAAIA,KAAK,CAACC,IAAV;AAAA,aAAd;AADF,WANe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAWA,eAAeZ,KAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\nimport fetch from 'isomorphic-unfetch';\n\nconst Index = props => (\n  // <Layout>\n  <h1>Batman TV Shows: {props.shows}</h1>\n\n  // <ul>\n  //   {props.shows.map(show => (\n  //     <li key={show.id}>\n  //       {show.name}\n  //     </li>\n  //   ))}\n  // </ul>\n);\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n  const data = await res.json();\n\n  console.log(`Show data fetched. Count: ${data.length}`);\n\n  return {\n    shows: data.map(entry => entry.show)\n  };\n};\n\nexport default Index;\n\n// import useSWR from 'swr';\n// import fetch from 'isomorphic-unfetch';\n//\n// function fetcher (url) {\n//   return fetch(url).then(r => r.json());\n// }\n//\n// export default function Index () {\n//   const { data, error } = useSWR('/api/randomQuote', fetcher);\n//   // The following line has optional chaining, added in Next.js v9.1.5,\n//   // is the same as `data && data.author`\n//   // const author = data.author;\n//   // let quote = data.quote;\n//   debugger;\n//   let quote;\n//\n//   if (!data) quote = 'Loading...';\n//   if (error) quote = 'Failed to fetch the quote.';\n//\n//   return (\n//     <main className='center'>\n//       <div className='quote'>{quote}</div>\n//\n//       <style jsx>{`\n//         main {\n//           width: 90%;\n//           max-width: 900px;\n//           margin: 300px auto;\n//           text-align: center;\n//         }\n//         .quote {\n//           font-family: cursive;\n//           color: #e243de;\n//           font-size: 24px;\n//           padding-bottom: 10px;\n//         }\n//         .author {\n//           font-family: sans-serif;\n//           color: #559834;\n//           font-size: 20px;\n//         }\n//       `}\n//       </style>\n//     </main>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}