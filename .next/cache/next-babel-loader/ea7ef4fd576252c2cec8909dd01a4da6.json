{"ast":null,"code":"import quotes from '../../quotes.json';\nexport default ((req, res) => {\n  const quote = quotes[Math.floor(Math.random() * quotes.length)];\n  res.status(200).json(quote);\n}); // import _ from 'lodash';\n//\n// const keys = [\n//   new Date('10/1/2019'),\n//   new Date('10/2/2019'),\n//   new Date('10/3/2019'),\n//   new Date('10/4/2019'),\n//   new Date('10/5/2019'),\n//   new Date('10/6/2019'),\n//   new Date('10/7/2019'),\n//   new Date('10/8/2019'),\n//   new Date('10/9/2019'),\n//   new Date('10/10/2019'),\n//   new Date('10/11/2019'),\n//   new Date('10/12/2019'),\n//   new Date('10/13/2019'),\n//   new Date('10/14/2019'),\n//   new Date('10/15/2019'),\n//   new Date('10/16/2019'),\n//   new Date('10/17/2019'),\n//   new Date('10/18/2019'),\n//   new Date('10/19/2019'),\n//   new Date('10/20/2019'),\n//   new Date('10/21/2019'),\n//   new Date('10/21/2019'),\n//   new Date('10/22/2019'),\n//   new Date('10/23/2019'),\n//   new Date('10/24/2019'),\n//   new Date('10/25/2019'),\n//   new Date('10/26/2019'),\n//   new Date('10/27/2019'),\n//   new Date('10/28/2019'),\n//   new Date('10/29/2019'),\n//   new Date('10/30/2019'),\n//   new Date('10/31/2019'),\n//   new Date('11/1/2019'),\n//   new Date('11/2/2019'),\n//   new Date('11/3/2019'),\n//   new Date('11/4/2019'),\n//   new Date('11/5/2019'),\n//   new Date('11/6/2019'),\n//   new Date('11/7/2019'),\n//   new Date('11/8/2019'),\n//   new Date('11/9/2019'),\n//   new Date('11/10/2019'),\n//   new Date('11/11/2019'),\n//   new Date('11/12/2019'),\n//   new Date('11/13/2019'),\n//   new Date('11/14/2019'),\n//   new Date('11/15/2019'),\n//   new Date('11/16/2019'),\n//   new Date('11/17/2019'),\n//   new Date('11/18/2019'),\n//   new Date('11/19/2019'),\n//   new Date('11/20/2019'),\n//   new Date('11/21/2019'),\n//   new Date('11/22/2019'),\n//   new Date('11/23/2019'),\n//   new Date('11/24/2019'),\n//   new Date('11/25/2019'),\n//   new Date('11/26/2019'),\n//   new Date('11/27/2019'),\n//   new Date('11/28/2019'),\n//   new Date('11/29/2019'),\n//   new Date('11/30/2019'),\n//   new Date('12/1/2019'),\n//   new Date('12/2/2019'),\n//   new Date('12/3/2019'),\n//   new Date('12/4/2019'),\n//   new Date('12/5/2019'),\n//   new Date('12/6/2019'),\n//   new Date('12/7/2019'),\n//   new Date('12/8/2019'),\n//   new Date('12/9/2019'),\n//   new Date('12/10/2019'),\n//   new Date('12/11/2019'),\n//   new Date('12/12/2019'),\n//   new Date('12/13/2019'),\n//   new Date('12/14/2019'),\n//   new Date('12/15/2019'),\n//   new Date('12/16/2019'),\n//   new Date('12/17/2019'),\n//   new Date('12/18/2019'),\n//   new Date('12/19/2019'),\n//   new Date('12/20/2019'),\n//   new Date('12/21/2019'),\n//   new Date('12/22/2019'),\n//   new Date('12/23/2019'),\n//   new Date('12/24/2019'),\n//   new Date('12/25/2019'),\n//   new Date('12/26/2019'),\n//   new Date('12/27/2019'),\n//   new Date('12/28/2019'),\n//   new Date('12/29/2019'),\n//   new Date('12/30/2019'),\n//   new Date('12/31/2019'),\n//   new Date('1/1/2020'),\n//   new Date('1/2/2020'),\n//   new Date('1/3/2020'),\n//   new Date('1/4/2020'),\n//   new Date('1/5/2020'),\n//   new Date('1/6/2020'),\n//   new Date('1/7/2020'),\n//   new Date('1/8/2020'),\n//   new Date('1/9/2020'),\n//   new Date('1/10/2020'),\n//   new Date('1/11/2020'),\n//   new Date('1/12/2020'),\n//   new Date('1/13/2020'),\n//   new Date('1/14/2020'),\n//   new Date('1/15/2020'),\n//   new Date('1/16/2020'),\n//   new Date('1/17/2020'),\n//   new Date('1/18/2020'),\n//   new Date('1/19/2020'),\n//   new Date('1/20/2020'),\n//   new Date('1/21/2020'),\n//   new Date('1/22/2020'),\n//   new Date('1/23/2020'),\n//   new Date('1/24/2020'),\n//   new Date('1/25/2020'),\n//   new Date('1/26/2020'),\n//   new Date('1/27/2020'),\n//   new Date('1/28/2020'),\n//   new Date('1/29/2020'),\n//   new Date('1/30/2020'),\n//   new Date('1/31/2020'),\n//   new Date('2/1/2020'),\n//   new Date('2/2/2020'),\n//   new Date('2/3/2020'),\n//   new Date('2/4/2020'),\n//   new Date('2/5/2020'),\n//   new Date('2/6/2020'),\n//   new Date('2/7/2020'),\n//   new Date('2/8/2020'),\n//   new Date('2/9/2020'),\n//   new Date('2/10/2020'),\n//   new Date('2/11/2020'),\n//   new Date('2/12/2020'),\n//   new Date('2/13/2020'),\n//   new Date('2/14/2020'),\n//   new Date('2/15/2020'),\n//   new Date('2/16/2020'),\n//   new Date('2/17/2020'),\n//   new Date('2/18/2020'),\n//   new Date('2/19/2020'),\n//   new Date('2/20/2020'),\n//   new Date('2/21/2020'),\n//   new Date('2/22/2020'),\n//   new Date('2/23/2020'),\n//   new Date('2/24/2020'),\n//   new Date('2/25/2020'),\n//   new Date('2/26/2020'),\n//   new Date('2/27/2020'),\n//   new Date('2/28/2020')\n// ];\n// const values = [\n//   0,\n//   134.00,\n//   0,\n//   0,\n//   135.60,\n//   134.00,\n//   134.00,\n//   0,\n//   134.00,\n//   134.00,\n//   134.80,\n//   134.20,\n//   134.20,\n//   133.00,\n//   134.00,\n//   134.00,\n//   133.60,\n//   134.80,\n//   133.60,\n//   132.80,\n//   135.40,\n//   0,\n//   0,\n//   134.00,\n//   134.00,\n//   134.00,\n//   134.00,\n//   134.00,\n//   0,\n//   0,\n//   133.20,\n//   133.20,\n//   134.20,\n//   0,\n//   131.80,\n//   133.40,\n//   133.80,\n//   133.80,\n//   0,\n//   132.20,\n//   132.20,\n//   133.20,\n//   133.20,\n//   132.80,\n//   132.80,\n//   132.40,\n//   132.80,\n//   132.60,\n//   0,\n//   132.20,\n//   133.00,\n//   132.60,\n//   132.60,\n//   133.20,\n//   133.60,\n//   134.80,\n//   133.40,\n//   0,\n//   133.4,\n//   133.2,\n//   133,\n//   133.6,\n//   133.6,\n//   134.6,\n//   135,\n//   135,\n//   0,\n//   134.8,\n//   134,\n//   134.4,\n//   0,\n//   0,\n//   134,\n//   134,\n//   133.4,\n//   134.8,\n//   133.4,\n//   134.2,\n//   0,\n//   134.2,\n//   133,\n//   0,\n//   133.4,\n//   0,\n//   0,\n//   0,\n//   0,\n//   0,\n//   0,\n//   133.6,\n//   133.6,\n//   133,\n//   133,\n//   133,\n//   133,\n//   132,\n//   132.6,\n//   132.6,\n//   132.6,\n//   0,\n//   134,\n//   132.4,\n//   132.4,\n//   132.4,\n//   133,\n//   133,\n//   0,\n//   133.6,\n//   133.6,\n//   133.6,\n//   133.6,\n//   133.6,\n//   0,\n//   0,\n//   0,\n//   0,\n//   0,\n//   0,\n//   0,\n//   0,\n//   133.6,\n//   132.4,\n//   131.8,\n//   0,\n//   0,\n//   132.4,\n//   132.4,\n//   131.6,\n//   131.6,\n//   0,\n//   0,\n//   0,\n//   131.8,\n//   132.4,\n//   132.4,\n//   131.4,\n//   131.4,\n//   0,\n//   0,\n//   133.4,\n//   133.4,\n//   132.4,\n//   132.2,\n//   132.2,\n//   131.6,\n//   0,\n//   133.2,\n//   134,\n//   0,\n//   131.2,\n//   131.2,\n//   130.2\n// ];\n// const weights = _.zipObject(keys, values);\n// let firstWeekAverage;\n// let currentUpOrDown;\n// let currentWeekAverage;\n// // console.log('*** weights: ', weights);\n//\n// const formatNumber = number => parseFloat(String(number)).toFixed(2);\n//\n// const highest = Math.max(...values);\n// const lowest = Math.min(...values.filter(number => number !== 0));\n//\n// function getAvg (weights) {\n//   const total = weights.reduce((acc, c) => acc + c, 0);\n//   return total / weights.length;\n// }\n//\n// export default (req, res) => {\n//   const numbers = Object.values(weights);\n//   var perChunk = 7; // items per chunk\n//   var arrayChunks = numbers.reduce((resultArray, item, index) => {\n//     const chunkIndex = Math.floor(index / perChunk);\n//     if (!resultArray[chunkIndex]) {\n//       resultArray[chunkIndex] = []; // start a new chunk\n//     }\n//     resultArray[chunkIndex].push(item);\n//     return resultArray;\n//   }, []);\n//\n//   const averages = arrayChunks.reduce((acc, current, index, arrayChunks) => {\n//     const filteredCurrent = current.filter(number => number !== 0);\n//     const previous = arrayChunks[index - 1] ? index - 1 : 0;\n//     const filteredPrevious = arrayChunks[previous].filter(number => number !== 0);\n//     if (_.isEmpty(filteredCurrent) || _.isEmpty(filteredPrevious)) {\n//       return acc;\n//     }\n//     // console.log('*** previous: ', previous, index);\n//     // console.log('*** arrayChunks[previous]: ', arrayChunks[previous], index);\n//     const currentAverage = getAvg(filteredCurrent);\n//     if (index === 0) {\n//       firstWeekAverage = currentAverage;\n//     }\n//     if (arrayChunks.length > index) {\n//       currentWeekAverage = currentAverage;\n//       currentUpOrDown = currentAverage - getAvg(filteredPrevious);\n//     }\n//     const averageHash = {\n//       average: formatNumber(currentAverage),\n//       upOrDown: formatNumber(currentAverage - getAvg(filteredPrevious))\n//     };\n//     // if (index === 16) {\n//     //   console.log('*** averageHash: ', averageHash, index);\n//     //   console.log('*** current: ', current);\n//     // }\n//     acc.push(averageHash);\n//     return acc;\n//   }, []);\n//\n//   const allAverages = averages.map(avgObject => parseFloat(avgObject.upOrDown));\n//   const averagePerWeek = getAvg(allAverages.filter(avg => avg !== 0));\n//   const bestWeeklyAverage = Math.min(...allAverages);\n//   const worstWeeklyAverage = Math.max(...allAverages);\n//   const totalWeeks = arrayChunks.length;\n//   const latest = values.reverse().find(number => number !== 0);\n//   // const parsedAllAverages = allAverages.map(avg => parseFloat(avg));\n//\n//   const originalReturnValue = [arrayChunks, averages, {\n//     latestWeight: formatNumber(latest),\n//     currentUpOrDown: formatNumber(currentUpOrDown),\n//     overall: formatNumber(currentWeekAverage - firstWeekAverage),\n//     averagePerWeek: formatNumber(averagePerWeek),\n//     highestWeight: highest,\n//     lowestWeight: lowest,\n//     // firstWeekAverage: formatNumber(firstWeekAverage),\n//     // currentWeekAverage: formatNumber(currentWeekAverage),\n//     totalWeeks: totalWeeks,\n//     bestWeeklyAverage: formatNumber(bestWeeklyAverage),\n//     worstWeeklyAverage: formatNumber(worstWeeklyAverage)\n//   }];\n//\n//   res.status(200).json({\n//     data: { title: 'Yessiree' }\n//   });\n// };","map":{"version":3,"sources":["/Users/marnigoltsman/Documents/code/today-i-weigh/pages/api/randomQuote.js"],"names":["quotes","req","res","quote","Math","floor","random","length","status","json"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AAEA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC3B,QAAMC,KAAK,GAAGH,MAAM,CAACI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,MAAM,CAACO,MAAlC,CAAD,CAApB;AACAL,EAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBN,KAArsourcesContent":["import quotes from '../../quotes.json';\n\nexport default (req, res) => {\n  const quote = quotes[Math.floor(Math.random() * quotes.length)];\n  res.status(200).json(quote);\n};\n\n// import _ from 'lodash';\n//\n// const keys = [\n//   new Date('10/1/2019'),\n//   new Date('10/2/2019'),\n//   new Date('10/3/2019'),\n//   new Date('10/4/2019'),\n//   new Date('10/5/2019'),\n//   new Date('10/6/2019'),\n//   new Date('10/7/2019'),\n//   new Date('10/8/2019'),\n//   new Date('10/9/2019'),\n//   new Date('10/10/2019'),\n//   new Date('10/11/2019'),\n//   new Date('10/12/2019'),\n//   new Date('10/13/2019'),\n//   new Date('10/14/2019'),\n//   new Date('10/15/2019'),\n//   new Date('10/16/2019'),\n//   new Date('10/17/2019'),\n//   new Date('10/18/2019'),\n//   new Date('10/19/2019'),\n//   new Date('10/20/2019'),\n//   new Date('10/21/2019'),\n//   new Date('10/21/2019'),\n//   new Date('10/22/2019'),\n//   new Date('10/23/2019'),\n//   new Date('10/24/2019'),\n//   new Date('10/25/2019'),\n//   new Date('10/26/2019'),\n//   new Date('10/27/2019'),\n//   new Date('10/28/2019'),\n//   new Date('10/29/2019'),\n//   new Date('10/30/2019'),\n//   new Date('10/31/2019'),\n//   new Date('11/1/2019'),\n//   new Date('11/2/2019'),\n//   new Date('11/3/2019'),\n//   new Date('11/4/2019'),\n//   new Date('11/5/2019'),\n//   new Date('11/6/2019'),\n//   new Date('11/7/2019'),\n//   new Date('11/8/2019'),\n//   new Date('11/9/2019'),\n//   new Date('11/10/2019'),\n//   new Date('11/11/2019'),\n//   new Date('11/12/2019'),\n//   new Date('11/13/2019'),\n//   new Date('11/14/2019'),\n//   new Date('11/15/2019'),\n//   new Date('11/16/2019'),\n//   new Date('11/17/2019'),\n//   new Date('11/18/2019'),\n//   new Date('11/19/2019'),\n//   new Date('11/20/2019'),\n//   new Date('11/21/2019'),\n//   new Date('11/22/2019'),\n//   new Date('11/23/2019'),\n//   new Date('11/24/2019'),\n//   new Date('11/25/2019'),\n//   new Date('11/26/2019'),\n//   new Date('11/27/2019'),\n//   new Date('11/28/2019'),\n//   new Date('11/29/2019'),\n//   new Date('11/30/2019'),\n//   new Date('12/1/2019'),\n//   new Date('12/2/2019'),\n//   new Date('12/3/2019'),\n//   new Date('12/4/2019'),\n//   new Date('12/5/2019'),\n//   new Date('12/6/2019'),\n//   new Date('12/7/2019'),\n//   new Date('12/8/2019'),\n//   new Date('12/9/2019'),\n//   new Date('12/10/2019'),\n//   new Date('12/11/2019'),\n//   new Date('12/12/2019'),\n//   new Date('12/13/2019'),\n//   new Date('12/14/2019'),\n//   new Date('12/15/2019'),\n//   new Date('12/16/2019'),\n//   new Date('12/17/2019'),\n//   new Date('12/18/2019'),\n//   new Date('12/19/2019'),\n//   new Date('12/20/2019'),\n//   new Date('12/21/2019'),\n//   new Date('12/22/2019'),\n//   new Date('12/23/2019'),\n//   new Date('12/24/2019'),\n//   new Date('12/25/2019'),\n//   new Date('12/26/2019'),\n//   new Date('12/27/2019'),\n//   new Date('12/28/2019'),\n//   new Date('12/29/2019'),\n//   new Date('12/30/2019'),\n//   new Date('12/31/2019'),\n//   new Date('1/1/2020'),\n//   new Date('1/2/2020'),\n//   new Date('1/3/2020'),\n//   new Date('1/4/2020'),\n//   new Date('1/5/2020'),\n//   new Date('1/6/2020'),\n//   new Date('1/7/2020'),\n//   new Date('1/8/2020'),\n//   new Date('1/9/2020'),\n//   new Date('1/10/2020'),\n//   new Date('1/11/2020'),\n//   new Date('1/12/2020'),\n//   new Date('1/13/2020'),\n//   new Date('1/14/2020'),\n//   new Date('1/15/2020'),\n//   new Date('1/16/2020'),\n//   new Date('1/17/2020'),\n//   new Date('1/18/2020'),\n//   new Date('1/19/2020'),\n//   new Date('1/20/2020'),\n//   new Date('1/21/2020'),\n//   new Date('1/22/2020'),\n//   new Date('1/23/2020'),\n//   new Date('1/24/2020'),\n//   new Date('1/25/2020'),\n//   new Date('1/26/2020'),\n//   new Date('1/27/2020'),\n//   new Date('1/28/2020'),\n//   new Date('1/29/2020'),\n//   new Date('1/30/2020'),\n//   new Date('1/31/2020'),\n//   new Date('2/1/2020'),\n//   new Date('2/2/2020'),\n//   new Date('2/3/2020'),\n//   new Date('2/4/2020'),\n//   new Date('2/5/2020'),\n//   new Date('2/6/2020'),\n//   new Date('2/7/2020'),\n//   new Date('2/8/2020'),\n//   new Date('2/9/2020'),\n//   new Date('2/10/2020'),\n//   new Date('2/11/2020'),\n//   new Date('2/12/2020'),\n//   new Date('2/13/2020'),\n//   new Date('2/14/2020'),\n//   new Date('2/15/2020'),\n//   new Date('2/16/2020'),\n//   new Date('2/17/2020'),\n//   new Date('2/18/2020'),\n//   new Date('2/19/2020'),\n//   new Date('2/20/2020'),\n//   new Date('2/21/2020'),\n//   new Date('2/22/2020'),\n//   new Date('2/23/2020'),\n//   new Date('2/24/2020'),\n//   new Date('2/25/2020'),\n//   new Date('2/26/2020'),\n//   new Date('2/27/2020'),\n//   new Date('2/28/2020')\n// ];\n// const values = [\n//   0,\n//   134.00,\n//   0,\n//   0,\n//   135.60,\n//   134.00,\n//   134.00,\n//   0,\n//   134.00,\n//   134.00,\n//   134.80,\n//   134.20,\n//   134.20,\n//   133.00,\n//   134.00,\n//   134.00,\n//   133.60,\n//   134.80,\n//   133.60,\n//   132.80,\n//   135.40,\n//   0,\n//   0,\n//   134.00,\n//   134.00,\n//   134.00,\n//   134.00,\n//   134.00,\n//   0,\n//   0,\n//   133.20,\n//   133.20,\n//   134.20,\n//   0,\n//   131.80,\n//   133.40,\n//   133.80,\n//   133.80,\n//   0,\n//   132.20,\n//   132.20,\n//   133.20,\n//   133.20,\n//   132.80,\n//   132.80,\n//   132.40,\n//   132.80,\n//   132.60,\n//   0,\n//   132.20,\n//   133.00,\n//   132.60,\n//   132.60,\n//   133.20,\n//   133.60,\n//   134.80,\n//   133.40,\n//   0,\n//   133.4,\n//   133.2,\n//   133,\n//   133.6,\n//   133.6,\n//   134.6,\n//   135,\n//   135,\n//   0,\n//   134.8,\n//   134,\n//   134.4,\n//   0,\n//   0,\n//   134,\n//   134,\n//   133.4,\n//   134.8,\n//   133.4,\n//   134.2,\n//   0,\n//   134.2,\n//   133,\n//   0,\n//   133.4,\n//   0,\n//   0,\n//   0,\n//   0,\n//   0,\n//   0,\n//   133.6,\n//   133.6,\n//   133,\n//   133,\n//   133,\n//   133,\n//   132,\n//   132.6,\n//   132.6,\n//   132.6,\n//   0,\n//   134,\n//   132.4,\n//   132.4,\n//   132.4,\n//   133,\n//   133,\n//   0,\n//   133.6,\n//   133.6,\n//   133.6,\n//   133.6,\n//   133.6,\n//   0,\n//   0,\n//   0,\n//   0,\n//   0,\n//   0,\n//   0,\n//   0,\n//   133.6,\n//   132.4,\n//   131.8,\n//   0,\n//   0,\n//   132.4,\n//   132.4,\n//   131.6,\n//   131.6,\n//   0,\n//   0,\n//   0,\n//   131.8,\n//   132.4,\n//   132.4,\n//   131.4,\n//   131.4,\n//   0,\n//   0,\n//   133.4,\n//   133.4,\n//   132.4,\n//   132.2,\n//   132.2,\n//   131.6,\n//   0,\n//   133.2,\n//   134,\n//   0,\n//   131.2,\n//   131.2,\n//   130.2\n// ];\n// const weights = _.zipObject(keys, values);\n// let firstWeekAverage;\n// let currentUpOrDown;\n// let currentWeekAverage;\n// // console.log('*** weights: ', weights);\n//\n// const formatNumber = number => parseFloat(String(number)).toFixed(2);\n//\n// const highest = Math.max(...values);\n// const lowest = Math.min(...values.filter(number => number !== 0));\n//\n// function getAvg (weights) {\n//   const total = weights.reduce((acc, c) => acc + c, 0);\n//   return total / weights.length;\n// }\n//\n// export default (req, res) => {\n//   const numbers = Object.values(weights);\n//   var perChunk = 7; // items per chunk\n//   var arrayChunks = numbers.reduce((resultArray, item, index) => {\n//     const chunkIndex = Math.floor(index / perChunk);\n//     if (!resultArray[chunkIndex]) {\n//       resultArray[chunkIndex] = []; // start a new chunk\n//     }\n//     resultArray[chunkIndex].push(item);\n//     return resultArray;\n//   }, []);\n//\n//   const averages = arrayChunks.reduce((acc, current, index, arrayChunks) => {\n//     const filteredCurrent = current.filter(number => number !== 0);\n//     const previous = arrayChunks[index - 1] ? index - 1 : 0;\n//     const filteredPrevious = arrayChunks[previous].filter(number => number !== 0);\n//     if (_.isEmpty(filteredCurrent) || _.isEmpty(filteredPrevious)) {\n//       return acc;\n//     }\n//     // console.log('*** previous: ', previous, index);\n//     // console.log('*** arrayChunks[previous]: ', arrayChunks[previous], index);\n//     const currentAverage = getAvg(filteredCurrent);\n//     if (index === 0) {\n//       firstWeekAverage = currentAverage;\n//     }\n//     if (arrayChunks.length > index) {\n//       currentWeekAverage = currentAverage;\n//       currentUpOrDown = currentAverage - getAvg(filteredPrevious);\n//     }\n//     const averageHash = {\n//       average: formatNumber(currentAverage),\n//       upOrDown: formatNumber(currentAverage - getAvg(filteredPrevious))\n//     };\n//     // if (index === 16) {\n//     //   console.log('*** averageHash: ', averageHash, index);\n//     //   console.log('*** current: ', current);\n//     // }\n//     acc.push(averageHash);\n//     return acc;\n//   }, []);\n//\n//   const allAverages = averages.map(avgObject => parseFloat(avgObject.upOrDown));\n//   const averagePerWeek = getAvg(allAverages.filter(avg => avg !== 0));\n//   const bestWeeklyAverage = Math.min(...allAverages);\n//   const worstWeeklyAverage = Math.max(...allAverages);\n//   const totalWeeks = arrayChunks.length;\n//   const latest = values.reverse().find(number => number !== 0);\n//   // const parsedAllAverages = allAverages.map(avg => parseFloat(avg));\n//\n//   const originalReturnValue = [arrayChunks, averages, {\n//     latestWeight: formatNumber(latest),\n//     currentUpOrDown: formatNumber(currentUpOrDown),\n//     overall: formatNumber(currentWeekAverage - firstWeekAverage),\n//     averagePerWeek: formatNumber(averagePerWeek),\n//     highestWeight: highest,\n//     lowestWeight: lowest,\n//     // firstWeekAverage: formatNumber(firstWeekAverage),\n//     // currentWeekAverage: formatNumber(currentWeekAverage),\n//     totalWeeks: totalWeeks,\n//     bestWeeklyAverage: formatNumber(bestWeeklyAverage),\n//     worstWeeklyAverage: formatNumber(worstWeeklyAverage)\n//   }];\n//\n//   res.status(200).json({\n//     data: { title: 'Yessiree' }\n//   });\n// };\n"]},"metadata":{},"sourceType":"module"}